<!-- Bread Crumb -->
<ul class="breadcrumb">
  <li><%= link_to "Home", root_path %></li>
  <li>Lessons</li>
  <li><%= link_to "Fundamentals", lesson_fundamental_path%></li>
  <li>Module 4 - Conditonals</li>
</ul>
<!-- End of Bread Crumb -->


<!-- Title -->
<div class="container gray">
	<div class="center">
		<h1>CONDITIONALS</h1>
	</div>
</div>
<!-- End of Title -->

<br>
<br>
<br>

<!-- Modules -->
<div class="custom-container">
	<div class="third-lesson-box">
		<div class="white">
		<h2 class='lesson-title white'>Learning Goal</h2>
		<p><span></span>Learn the basics of using “If” statements and incorporating conditionals, and setting GPIO pin as an input</p>
		</div>
	</div>
</div>

<br>
<br>
<br>
<br>
<br>

<!-- Lesson Box -->
<div class="custom-container">
	<div class="primary-lesson-box">
		<div class="gray">
			<h1 class='lesson-title center gray'>Lesson & Syntax</h1>
			<p>For this exercise, the button_state variable is created to indicate whether the button is pressed, or if the button is not pressed.<p>
			<P>If the button is pressed,</P>
			<P><span class="code">button_state == 1</span> or <span class="code">button_state == True</span> is a <b>True</b> statement.</P>
			<p>If the button is not pressed, the above would be a false statement, and <span class="code">button_state == 0</span> or <span class="code">button_state == False</span> would be a <b>True</b> statement.</p>
			<p>Below is the syntax for If/Else statement:</p>
			<p><pre class="image-400" style="margin-left: 20px;">if [<span class="code">condition</span>]:<br />	[<span class="code">Code for if condition is true</span>]<br />else:<br />	[<span class="code">Code for if condition is false</span>]</pre></p>
			<p>For example, below is the code for turning on the LED light connected to GPIO Pin 13 if the button is pressed, aka if <span class="code">button_state == True</span>. When the button is not pressed, the LED light should remain off.</p>
			<p><pre class="image-300" style="margin-left: 20px">if button_state == True:<br />	GPIO.output(13, GPIO.HIGH)<br />else:<br/>	GPIO.output(13, GPIO.LOW)</pre></p>
		</div>
	</div>
</div>

<br>
<br>
<br>

<!-- Excercises -->
<div class="custom-container gray">
	<h1>Excercises</h1>
</div>


<!-- Excercise 1 -->
<div class="custom-container gray">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 1: Push button to turn on LED light</h2>
			<p>Configure the button, an LED light, a resistor, three males-to-females and one male-to-male on the bread board as shown in the diagram below:</p>
			<div><%= image_tag ("conditional1.png")%></div>
			<p>2. Open nano file <code>ex4_1.py</code></p>
			<p>3. Read directions in red and complete the exercise. Fill in the conditional statements to your code. Note that GPIO Pin 11 goes into the button and GPIO Pin 13 goes into the LED light. When the button is pressed, GPIO Pin 11’s output is <b>True</b>, which is referred to the variable <span class="code">button_state</span>. The variable <span class="code">button_state</span> refers to the state of the button: if the button is pressed then it will equal <b>True</b>, and if the button is not pressed, it will equal <b>False</b>.</p>
			<p>When you press the button, your LED light should turn on. If you are not pressing the button, the LED light should remain off. Type <b>CTRL+C</b> to your terminal to stop the code.</p>
		</div>
	</div>
</div>


<br>
<br>

<!-- Exercise 2-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 2: Push button to turn off LED light</h2>



			
			<p>1. Keep bread board set up the same as in Module 3 Exercise 1.</p>
			<p>2. Open nano file <code>ex3_2.py</code></p>
			<p>3. See directions in red in the nano file. Enter a true statement using the is not comparison operator, != (Example: 1+3 != 2) for the while condition.</p>
			<p>4. Run the python code, and your LED light should start blinking if your conditional statement is <b>True</b></p>
			<p>5. <b>CTRL+C</b> to stop your code</p>
			<p>6. Run python code <code>cleanup.py</code> to set your GPIO pins back to default state.</p>
			<p>7. Go back to nano file <code>ex3_2.py</code> and try entering a false statement, such as 1+3 != 4</p>
			<p>Your light should not turn on, because the while loop will not activate.</p>
			<p>8. Try entering other true statements, using the != operator in the condition. Make sure to run the python code cleanup.py to set your GPIO pins back to default state each time.</p>
		</div>
	</div>
</div>

<br>
<br>

<!-- Exercise 3-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 3: Understand the comparison operator > and <</h2>
			<p>1. Keep bread board set up the same as in Module 3 Exercise 2.</p>
			<p>2. Open nano file <code>ex3_3.py</code></p>
			<p>3. See directions in red in the nano file. Enter a true statement using the is greater than comparison operator, > (example: 3 > 2) for the while condition.</p>
			<p>4. Run the python code, and your LED light should start blinking if your conditional statement is <code>True</code></p>
			<p>5. <b>CTRL+C</b> to stop your code</p>
			<p>6. Run python code <code>cleanup.py</code> to set your GPIO pins back to default state.</p>
			<p>7. Go back to nano file <code>ex3_3.py</code> and try entering a false statement, such as 2 > 3</p>
			<p>Your light should not turn on, because the while loop will not activate.</p>
			<p>8. Try entering other true statements, using the is less than, < operator in the condition. Make sure to run the python code cleanup.py to set your GPIO pins back to default state each time.</p>
		</div>
	</div>
</div>

<br>
<br>


<!-- Exercise 4-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 4: Assigning variables and comparing them</h2>
			<p>1. Keep bread board set up the same as in Module 3 Exercise 3.</p>
			<p>2. Open nano file <code>ex3_4.py</code></p>
			<p>3. See directions in red in the nano file. Assign variable x to be 2 and variable y to be 1+1</p>
			<p>4. Use comparison operator ==, which means is equal to, to compare x and y. This statement should be true, and therefore activate your while loop.</p>
			<p>5. Run the python code, and your LED light should start blinking.</p>
			<p>6. Run <code>cleanup.py</code></p>
		</div>
	</div>
</div>
<!-- END of Excercises -->
<br>
<br>
<br>

<!-- Final -->
<div class="custom-container">
	<div class="primary-lesson-box">
		<div class="gray">
		<h1 class='lesson-title center gray'>Time to celebrate.</h1>
		<p><i class="fa fa-hand-peace-o" aria-hidden="true"></i> Pat yourself on the back, give a classmate a high five!</p>
		<p><i class="fa fa-hand-paper-o" aria-hidden="true"></i> Check with the instructor you're good to proceed.</p>
		</div>
		<div class="center">
			<%= link_to "< Back to moduel 3", lesson_fundamental_comparison_path, class:"btn btn-primary" %>
			<%= link_to "Go to module 5 >", lesson_fundamental_logic_path, class:"btn btn-primary" %>
		</div>
	</div>
</div>

<br>
<br>


