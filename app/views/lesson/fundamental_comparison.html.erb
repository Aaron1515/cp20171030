<!-- Pop up image modal template -->
<div class="modal fade" id="enlargeImageModal" tabindex="-1" role="dialog" aria-labelledby="enlargeImageModal" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header" style="border: none;">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
      </div>
      <div class="modal-body">
        <img src="" class="enlargeImageModalSource" style="width: 100%;">
      </div>
    </div>
  </div>
</div>
<!-- End of image pop up modal -->




<!-- Bread Crumb -->
<div class="sticky">
	<ul class="breadcrumb" id="breadcrumb">
	  <li><%= link_to "Lessons", lesson_index_path %></li>
	  <li><%= link_to "Fundamentals", lesson_fundamental_path%></li>
	  <li>Module 3 - Comparison</li>
	</ul>
</div>
<!-- End of Bread Crumb -->

<br>

<!-- Title -->
<div class="container gray">
	<div class="center">
		<h1>Comparisons Operators and Boolean Logic</h1>
	</div>
</div>
<!-- End of Title -->

<br>
<br>
<br>

<!-- Modules -->
<div class="custom-container">
	<div class="third-lesson-box">
		<div class="white">
		<h2 class='lesson-title white'>Learning Goal</h2>
		<p>
			<ul>
				<li>Learn the syntax for the different comparison operators (equal, less than, more than, etc.)</li>
				<li>Understand Boolean logic and apply it using conditional statements </li>
				<li>Learn how to assign variables and incorporating them into conditionals/comparisons</li>
			</ul>
		</p>
		</div>
	</div>
</div>

<br>
<br>
<br>
<br>
<br>

<!-- Lesson Box -->
<div class="custom-container">
	<div class="primary-lesson-box">
		<div class="gray">
			<h1 class='lesson-title center gray'>Lesson & Syntax</h1>
			<p>Booleans are objects used in programming that are either <span class="code-text">True</span> or <span class="code-text">False</span>. A true boolean can result from true comparisons, or simply by typing ‘<span class="code-text">true</span>’ or ‘<span class="code-text">1</span>’. A False Boolean can result from false comparisons, or simply by typing ‘<span class="code-text">False</span>’ or ‘<span class="code-text">0</span>’.<p>
			<p>For example, the statement <span class="code-text">2 == 2</span> is true, so the resulting boolean is True. Let's look at another example, the statement <span class="code-text">2 == 3</span> is false, the number two is not equal to the number three so the resulting boolean is False.</p>
			<p>The while loop will only execute if the [while condition] it takes in is a true boolean.</p>
			<p>Syntax for the while loop is as follows:</p>
			<p><pre class="image-300" style="margin-left: 20px">while <span class="code">[while condition]</span>:<br />	<span class="code">[conditional code]</span></pre></p>
			<p>For example, the code below will continuously print “Hello!” for as long as 1 == 1 (which is always true).</p>
			<p><pre class="image-300" style="margin-left: 20px">while 1 == 1:<br />	print “Hello!”</pre></p>
			<p>The following code is equivalent to the one above:</p>
			<p><pre class="image-300" style="margin-left: 20px">while True:<br />	print “Hello!”</pre></p>
			<p>*If you run the code above, you would be stuck in an infinite loop.  You can break out of it by pressing <b>CTRL+C</b>.</p>
		</div>
	</div>
</div>
<br>
<br>
<div class="custom-container">
	<div class="primary-lesson-box">
		<div class="gray">
			<h1 class='lesson-title center gray'>Learning Opportunity</h1>
			<p><b>What is a boolean?</b><br /> Booleans are True or False objects used in all programming languages.</p>
			<p><b>What are the different comparison types?</b><br />There are many different comparison operators, but the most common ones are shown below.</p>
			<div class="center">
				<table>
					<tbody>
						<tr>
							<th>Syntax</th>
							<th>Operation</th>
						</tr>
						<tr>
							<td><code>==</code></td>
							<td>Equal to</td>
						</tr>
						<tr>
							<td><code>!=</code></td>
							<td>Not equal to</td>
						</tr>
						<tr>
							<td><code><</code></td>
							<td>Less than</td>
						</tr>
						<tr>
							<td><code>></code></td>
							<td>Greater than</td>
						</tr>
						<tr>
							<td><code><=</code></td>
							<td>Less than or equal to</td>
						</tr>
						<tr>
							<td><code>>=</code></td>
							<td>Greater than or equal to</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<br>
	</div>
</div>

<br>
<br>
<br>

<!-- Exercises -->
<div class="custom-container gray">
	<h1>Exercises</h1>
</div>


<!-- Exercise 1 -->
<div class="custom-container gray">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 1: Using the comparison operator ==</h2>
			<p>1. Set up the breadboard the same way as in Module 1, Exercise 2:</p>
			<div><div><%= image_tag ("gpio3.png"), class:"pop-img" %></div></div>
			<p>2. Open the ‘Module3’ folder and open python file <code>ex3_1.py</code></p>
			<p>3. Enter a true statement (such as <span class="code-text">1+1 == 2</span>) for the while condition. Remember to use the == sign, which is an equal sign for comparisons, whereas the = sign is to assign variables which we will cover in a later exercise.</p>
			<p>4. Save and run the python code. Your LED light should start blinking if your conditional statement is True.</p>
			<p>5. <b>CTRL+C</b> to stop your code</p>
			<p>6. Run python code <code>cleanup.py</code> to set your GPIO pins back to default state.</p>
			<p>7. Go back to python file <code>ex3_1.py</code> and try entering a false statement, such as <span class="code-text">1+3 == 2</span></p>
			<p>8. Save and run your python file. Your light should not turn on, because the while loop will not activate.</p>
			<p>9. Try entering other true statements in the condition. Make sure to run the python code <code>cleanup.py</code> to set your GPIO pins back to default state each time.</p>
		</div>
	</div>
</div>


<br>
<br>

<!-- Exercise 2-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 2: Using the comparison operator !=</h2>
			<p>1. Keep the breadboard set up the same as in Module 3 Exercise 1.</p>
			<div><div><%= image_tag ("gpio3.png"), class:"pop-img" %></div></div>
			<p>2. Open python file <code>ex3_2.py</code></p>
			<p>3. See directions in the python file. Enter a true statement using the <span class="code-text">not equal to</span> comparison operator, <span class="code-text">!=</span>  (Example: <span class="code-text">1+3 != 2</span>) for the while condition.</p>
			<p>4. Save and run the python file. Your LED light should start blinking if your conditional statement is <b>True</b>.</p>
			<p>5. <b>CTRL+C</b> to stop your code</p>
			<p>6. Run python code <code>cleanup.py</code> to set your GPIO pins back to default state.</p>
			<p>7. Go back to the python file <code>ex3_2.py</code> and try entering a false statement, such as <span class="code-text">1+3 == 2</span></p>
			<p>8. Save and run your python file. Your light should not turn on, because the while loop will not activate.</p>
			<p>9. Try entering other true statements, using the != operator in the condition. Make sure to run the python code cleanup.py to set your GPIO pins back to default state each time.</p>
		</div>
	</div>
</div>

<br>
<br>

<!-- Exercise 3-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 3: Using the comparison operator > and <</h2>
			<p>1. Keep the breadboard set up the same as in Module 3 Exercise 1.</p>
			<div><div><%= image_tag ("gpio3.png"), class:"pop-img" %></div></div>
			<p>2. Open python file <code>ex3_3.py</code></p>
			<p>3. See directions in the python file. Enter a true statement using the greater than comparison operator, > (example: 3 > 2) for thSave and run the python code. Your LED light should start blinking if your conditional statement is <code>True</code></p>
			<p>4. Save and run the python code. Your LED light should start blinking if your conditional statement is True.</p>
			<p>5. <b>CTRL+C</b> to stop your code</p>
			<p>6. Run python code <code>cleanup.py</code> to set your GPIO pins back to default state.</p>
			<p>7. Go back to python file <code>ex3_3.py</code> and try entering a false statement, such as <span class="code-text">2 > 3</span><br />Your light should not turn on, because the while loop will not activate.</p>
			<p>8. Try entering other true statements, using the <span class="code-text">less than</span>, < operator in the condition. Make sure to run the python code <code>cleanup.py</code> to set your GPIO pins back to default state each time. </p>
		</div>
	</div>
</div>

<br>
<br>


<!-- Exercise 4-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 4: Assigning variables and comparing them</h2>
			<p>1. Keep the breadboard set up the same as in Module 3 Exercise 1.</p>
			<div><div><%= image_tag ("gpio3.png"), class:"pop-img" %></div></div>
			<p>2. Open python file <code>ex3_4.py</code></p>
			<p>3. See directions in the python file. Assign variable <span class="code-text">x</span> to be <span class="code-text">2</span> and variable y to be <span class="code-text">1+1</span></p>
			<p>4. Use comparison operator <span class="code-text">==</span>, which means <span class="code-text">equal to</span>, to compare <span class="code-text">x</span> and <span class="code-text">y</span>. This statement should be true, and therefore activate your while loop.</p>
			<p>5. Save and run the python file. Your LED light should start blinking.</p>
			<p>6. <b>CTRL+C</b> to stop your code</p>
			<p>6. Run <code>cleanup.py</code></p>
		</div>
	</div>
</div>
<!-- END of Exercises -->
<br>
<br>
<br>

<!-- Final -->
<div class="custom-container">
	<div class="primary-lesson-box final-box">
		<div class="gray">
		<h1 class='lesson-title center gray'>Time to celebrate.</h1>
		<p><i class="fa fa-hand-peace-o" aria-hidden="true"></i> Pat yourself on the back, give a classmate a high five!</p>
		<p><i class="fa fa-hand-paper-o" aria-hidden="true"></i> Check with the instructor you're good to proceed.</p>
		</div>
		<div class="center">
			<div class="final-btn">
				<%= link_to "< Back to Module 2", lesson_fundamental_loops_path, class:"custom-btn btn-second-invert" %>
			</div>
			<div class="final-btn">
				<%= link_to "Go to Module 4 >", lesson_fundamental_conditional_path, class:"custom-btn btn-second-invert"%>
			</div>
		</div>
	</div>
</div>

<br>
<br>



<script type="text/javascript">
$(function() {
  	$('.pop-img').on('click', function() {
		$('.enlargeImageModalSource').attr('src', $(this).attr('src'));
		$('#enlargeImageModal').modal('show');
	});
});
</script>