<!-- Bread Crumb -->
<ul class="breadcrumb" id="breadcrumb">
  <li><%= link_to "Home", root_path %></li>
  <li>Lessons</li>
  <li><%= link_to "Fundamentals", lesson_fundamental_path%></li>
  <li>Module 4 - Conditonals</li>
</ul>
<!-- End of Bread Crumb -->


<!-- Title -->
<div class="container gray">
	<div class="center">
		<h1>CONDITIONALS</h1>
	</div>
</div>
<!-- End of Title -->

<br>
<br>
<br>

<!-- Modules -->
<div class="custom-container">
	<div class="third-lesson-box">
		<div class="white">
		<h2 class='lesson-title white'>Learning Goal</h2>
		<p><span></span>Learn the basics of using “If” statements and incorporating conditionals, and setting GPIO pin as an input</p>
		</div>
	</div>
</div>

<br>
<br>
<br>
<br>
<br>

<!-- Lesson Box -->
<div class="custom-container">
	<div class="primary-lesson-box">
		<div class="gray">
			<h1 class='lesson-title center gray'>Lesson & Syntax</h1>
			<p>For this exercise, the button_state variable is created to indicate whether the button is pressed, or if the button is not pressed.<p>
			<P>If the button is pressed,</P>
			<P><span class="code">button_state == 1</span> or <span class="code">button_state == True</span> is a <b>True</b> statement.</P>
			<p>If the button is not pressed, the above would be a false statement, and <span class="code">button_state == 0</span> or <span class="code">button_state == False</span> would be a <b>True</b> statement.</p>
			<p>Below is the syntax for If/Else statement:</p>
			<p><pre class="image-400" style="margin-left: 20px;">if [<span class="code">condition</span>]:<br />	[<span class="code">Code for if condition is true</span>]<br />else:<br />	[<span class="code">Code for if condition is false</span>]</pre></p>
			<p>For example, below is the code for turning on the LED light connected to GPIO Pin 13 if the button is pressed, aka if <span class="code">button_state == True</span>. When the button is not pressed, the LED light should remain off.</p>
			<p><pre class="image-300" style="margin-left: 20px">if button_state == True:<br />	GPIO.output(13, GPIO.HIGH)<br />else:<br/>	GPIO.output(13, GPIO.LOW)</pre></p>
		</div>
	</div>
</div>

<br>
<br>
<br>

<!-- Excercises -->
<div class="custom-container gray">
	<h1>Excercises</h1>
</div>


<!-- Excercise 1 -->
<div class="custom-container gray">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 1: Push button to turn on LED light</h2>
			<p>Configure the button, an LED light, a resistor, three males-to-females and one male-to-male on the bread board as shown in the diagram below:</p>
			<div><%= image_tag ("conditional1.png")%></div>
			<p>2. Open nano file <code>ex4_1.py</code></p>
			<p>3. Read directions in red and complete the exercise. Fill in the conditional statements to your code. Note that GPIO Pin 11 goes into the button and GPIO Pin 13 goes into the LED light. When the button is pressed, GPIO Pin 11’s output is <b>True</b>, which is referred to the variable <span class="code">button_state</span>. The variable <span class="code">button_state</span> refers to the state of the button: if the button is pressed then it will equal <b>True</b>, and if the button is not pressed, it will equal <b>False</b>.</p>
			<p>When you press the button, your LED light should turn on. If you are not pressing the button, the LED light should remain off. Type <b>CTRL+C</b> to your terminal to stop the code.</p>
		</div>
	</div>
</div>


<br>
<br>

<!-- Exercise 2-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 2: Push button to turn off LED light</h2>
			<p>1. Keep the same configuration on the breadboard as Module 4, Exercise 1.</p>
			<p>2. Open nano file <code>ex4_2.py</code></p>
			<p>3. Read the directions in red. Refer to <code>ex4_1.py</code> if necessary in order to write the conditional codes for each conditional statement.</p>
			<p>4. When you run your code, the LED light default state should be on, and when you press the button, it should turn off. Type <b>CTRL+C</b> to your terminal to stop the code.</p>
		</div>
	</div>
</div>

<br>
<br>

<!-- Exercise 3-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 3: Push button to blink LED light</h2>
			<p>1. Keep the same configuration on the breadboard as Module 4, Exercise 1.</p>
			<p>2. Open nano file <code>ex4_3.py</code></p>
			<p>3. Read the directions in red. Fill in the conditional codes such that when the button is pressed down, the LED light will blink 3 times.</p>
			<p>Remember to use the “for” loop and the <code>Time.sleep(number)</code> function after setting the GPIO outputs. Hint: See nano file <code>ex2_1.py</code> (Module 2, Exercise 1) and the lesson from Module 2.</p>
		</div>
	</div>
</div>

<!-- END of Excercises -->
<br>
<br>
<br>

<!-- Final -->
<div class="custom-container">
	<div class="primary-lesson-box">
		<div class="gray">
		<h1 class='lesson-title center gray'>Time to celebrate.</h1>
		<p><i class="fa fa-hand-peace-o" aria-hidden="true"></i> Pat yourself on the back, give a classmate a high five!</p>
		<p><i class="fa fa-hand-paper-o" aria-hidden="true"></i> Check with the instructor you're good to proceed.</p>
		</div>
		<div class="center">
			<%= link_to "< Back to module 3", lesson_fundamental_comparison_path, class:"custom-btn btn-second-invert" %>
			<%= link_to "Go to module 5 >", lesson_fundamental_logic_path, class:"custom-btn btn-second-invert" %>
		</div>
	</div>
</div>

<br>
<br>


