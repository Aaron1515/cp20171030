<!-- Pop up image modal template -->
<div class="modal fade" id="enlargeImageModal" tabindex="-1" role="dialog" aria-labelledby="enlargeImageModal" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header" style="border: none;">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
      </div>
      <div class="modal-body">
        <img src="" class="enlargeImageModalSource" style="width: 100%;">
      </div>
    </div>
  </div>
</div>
<!-- End of image pop up modal -->



<!-- Bread Crumb -->
<div class="sticky">
	<ul class="breadcrumb" id="breadcrumb">
	  <li><%= link_to "Home", root_path %></li>
	  <li><%= link_to "Lessons", lesson_index_path %></li>
	  <li><%= link_to "Fundamentals", lesson_fundamental_path%></li>
	  <li>Module 5 - Logic Gates</li>
	</ul>
</div>
<!-- End of Bread Crumb -->


<!-- Title -->
<div class="container gray">
	<div class="center">
		<h1>LOGIC GATES</h1>
	</div>
</div>
<!-- End of Title -->

<br>
<br>
<br>

<!-- Modules -->
<div class="custom-container">
	<div class="third-lesson-box">
		<div class="white">
		<h2 class='lesson-title white'>Learning Goal</h2>
		<p>
			<ul>
				<li>Understand the concept of a logic gate</li>
				<li>Understand three basic logic gates: AND, OR, and NOT</li>
			</ul>
		</p>
		</div>
	</div>
</div>

<br>
<br>
<br>
<br>
<br>

<!-- Lesson Box -->
<div class="custom-container">
	<div class="primary-lesson-box">
		<div class="gray">
			<h1 class='lesson-title center gray'>Lesson & Syntax</h1>
			<p>Logic gate is something that can use a Boolean function (see Module 4). You do a logic statement that has one or more inputs (binary inputs, i.e. 0 and 1) and generates one output (binary output, 0 and 1). The inputs and output are True (1) or False (0) statements. The syntax that is used to describe this logic gate is “and”, “or”, “not”, “nor”, “xor”, “xnor”, “nor”, and “nand”. In this module, we will only do “and”, “or”, and “not”.<p>
			<P>Let’s think of “and” and what it means. And is a two-input gate, which requires two statements and then the output will then say if it is true or false. The And statement requires both inputs to be true in order to give a true output.  Recall that 1 is True and 0 is False.</P>
			<table class="custom-table custom-container">
			  <tr>
			    <th colspan="2" style="width:67%;">Input</th>
			    <th>Output</th>
			  </tr>
			  <tr>
			    <td>0</td>
			    <td>0</td>
			    <td>0</td>
			  </tr>
			  <tr>
			    <td>0</td>
			    <td>1</td>
			    <td>0</td>
			  </tr>
			  <tr>
			  	<td>1</td>
			    <td>0</td>
			    <td>0</td>
			  </tr>
			  <tr>
			  	<td>1</td>
			    <td>1</td>
			    <td>1</td>
			  </tr>
			</table>
			<p>Now that we have the And gate, we can do an Or gate. Using the same example as before, we need two inputs. Now this is different because And required that both statements be true, but Or is if either conditions are true, then you will have a true output. See the truth table below.</p>
			<table class="custom-table custom-container">
			  <tr>
			    <th colspan="2" style="width:67%;">Input</th>
			    <th>Output</th>
			  </tr>
			  <tr>
			    <td>0</td>
			    <td>0</td>
			    <td>0</td>
			  </tr>
			  <tr>
			    <td>1</td>
			    <td>0</td>
			    <td>1</td>
			  </tr>
			  <tr>
			  	<td>0</td>
			    <td>1</td>
			    <td>1</td>
			  </tr>
			  <tr>
			  	<td>1</td>
			    <td>1</td>
			    <td>1</td>
			  </tr>
			</table>
			<p>The Not gate function is different where you only need one binary input and will get one binary output. This gate is called an “inverter” because the function will flip the input and the output. Here is the truth table.</p>
			<table class="custom-table custom-container">
			  <tr>
			    <th>Input</th>
			    <th>Output</th>
			  </tr>
			  <tr>
			    <td>0</td>
			    <td>1</td>
			  </tr>
			  <tr>
			    <td>1</td>
			    <td>0</td>
			  </tr>
			</table>
		</div>
	</div>
</div>

<br>
<br>
<br>

<!-- Excercises -->
<div class="custom-container gray">
	<h1>Excercises</h1>
</div>


<!-- Excercise 1 -->
<div class="custom-container gray">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 1: Configure two buttons so when both are pressed simultaneously, both the LEDs light up</h2>
			<p>1. Configure the breadboard to have two buttons and two LED lights. Each button should control an individual LED light.</p>
			<div><div><%= image_tag ("logic1.png"), class: "pop-img" %></div></div>
			<p>2. Open python file <code>ex5_1.py</code></p>
			<p>3. Read the directions in red and complete the exercise. Note that GPIO Pin 11 takes an input from button 1 (at the top) and GPIO Pin 13 takes an input from button 2, which is below button 1.</p>
			<p>Note: When button 1 is pressed, GPIO Pin 11 is True, which is referred to the variable <span class="code-text">button_state_1</span>. The variable <span class="code-text">button_state_1</span> refers to the state of the button 1: if the button is pressed then it will equal True, and if the button is not pressed, it will equal False. Same with variable <span class="code-text">button_state_2</span>, which refers to the state of button 2. GPIO Pin 15 and GPIO Pin 18 are connected to LED light 1 and LED light 2 respectively.  See diagram from step 1.</p>
			<p>4. Save and run the python file. When both button 1 and button 2 are pressed, the both LED lights should turn on. If either button 1 OR button 2 is pressed, neither LED light should turn on.</p>
			<p>5. <b>CTRL+C</b> in the terminal to stop code</p>
			<p>6. Run <code>cleanup.py</code></p>
		</div>
	</div>
</div>


<br>
<br>

<!-- Exercise 2-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 2: Configure two buttons so that when either is pressed, the LEDs lights up.</h2>
			<p>1. Keep the same configuration on the breadboard as Module 5 Exercise 1.</p>
			<div><div><%= image_tag ("logic1.png"), class: "pop-img" %></div></div>
			<p>2. Open python file <code>ex5_2.py</code></p>
			<p>3. Read the directions in the python file. The previous code from Module 5 Exercise 1 is set up for you, so add another <b>if/else</b> statement with an <b>Or</b> logic gate.</p>
			<p>4. Save and run the python file. If either button is pressed, or both are pressed at the same time, then both LEDs should light up.</p>
			<p>5. <b>CTRL+C</b> in the terminal to stop code</p>
			<p>6. Run <code>cleanup.py</code></p>
		</div>
	</div>
</div>

<br>
<br>

<!-- Exercise 3-->
<div class="custom-container">
	<div class="second-lesson-box">
		<div class="gray">
			<h2 class='lesson-title gray'>Exercise 3: Configure two buttons so that when neither are pressed, the LED lights up.</h2>
			<p>1. Keep the same configuration on the breadboard as Module 5 Exercise 1.</p>
			<div><div><%= image_tag ("logic1.png"), class: "pop-img" %></div></div>
			<p>2. Open python file <code>ex5_3.py</code></p>
			<p>3. Read the directions the python file. Remember that to use a <span class="code-text">Not</span> logic gate, it is not as easy as typing in the word “Not”. You must use the operator <span class="code-text">!=</span></p>
			<p>4. Save and run the python file. The default state of the LED lights should be on. If either or both buttons are pressed, the LED lights should turn off.</p>
			<p>5. <b>CTRL+C</b> in the terminal to stop code</p>
			<p>6. Run <code>cleanup.py</code></p>
		</div>
	</div>
</div>

<!-- END of Excercises -->
<br>
<br>
<br>

<!-- Final -->
<div class="custom-container">
	<div class="primary-lesson-box">
		<div class="gray">
		<h1 class='lesson-title center gray'>Time to celebrate.</h1>
		<p><i class="fa fa-hand-peace-o" aria-hidden="true"></i> Pat yourself on the back, give a classmate a high five!</p>
		<p><i class="fa fa-hand-paper-o" aria-hidden="true"></i> Check with the instructor you're good to proceed.</p>
		</div>
		<div class="center">
			<%= link_to "< Back to module 3", lesson_fundamental_conditional_path, class:"custom-btn btn-second-invert" %>
			<%= link_to "Home >", root_path, class:"custom-btn btn-second-invert" %>
		</div>
		<br>
	</div>
</div>

<br>
<br>

<!-- JavaScript for popup images -->
<script type="text/javascript">
$(function() {
	$('.pop-img').on('click', function() {
		$('.enlargeImageModalSource').attr('src', $(this).attr('src'));
		$('#enlargeImageModal').modal('show');
	});
});
</script>
